#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <string.h>

typedef struct
{
    int stt;
    char ten[55];
    int gia;
    int so;
} san_pham;

typedef struct Node
{
    san_pham data;
    struct Node *next;
} Node;

typedef struct
{
    Node *first;
    Node *last;
} Linked_list;

Node *prev_node;

Node* create_node(int n)
{
    san_pham sp;
    sp.stt=n;
    printf("Nhap Ten hang:");
    gets(sp.ten);
    printf("Nhap Don gia:");
    scanf("%d",&sp.gia);
    printf("Nhap So luong:");
    scanf("%d",&sp.so);
    Node *node=(Node*)malloc(sizeof(Node));
    node->data=sp;
    node->next=NULL;
    return node;
}

Linked_list* create_list()
{
    Linked_list *list=(Linked_list*)malloc(sizeof(Linked_list));
    list->first=NULL;
    list->last=NULL;
    return list;
}

void add_first_node(Linked_list *list,Node *node)
{
    list->first=node;
    list->last=node;
}

void insert_to_first(Linked_list *list, Node *node)
{
    node->next = list->first;
    list->first = node;
}

void insert_to_last(Linked_list *list,Node *node)
{
    list->last->next=node;
    list->last=node;
}

Node* search_node(Linked_list *list, int key)
{
    prev_node = NULL;
    Node *node = list->first;
    while(node != NULL)
    {
        if(node->data.gia == key)
        {
            return node;
        }
        prev_node = node;
        node = node->next;
    }
    return NULL;
}

void delete_node(Linked_list *list, int key)
{
    Node *found = search_node(list, key);
    if(found != NULL)
    {
        if(list->first == found)
        {
            list->first = found->next;
            if(list->first == NULL)
            {
                list->last = NULL;
            }
        }
        else if(list->last == found)
        {
            prev_node->next = NULL;
            list->last = prev_node;
        }
        else
        {
            prev_node->next = found->next;
        }
        free(found);
    }
    else
    {
        printf("Not found node with key = %d\n", key);
    }
}

void print_list(Linked_list *list)
{
    Node *node=list->first;
    int t,total=0,i=1;
    while(node!=NULL)
    {
        t=(node->data.gia)*(node->data.so);
        printf("%3d%9s%11d%12d%13d\n",i++,node->data.ten,node->data.gia,node->data.so,t);
        node=node->next;
        total+=t;
    }
    printf("============================Tong tien:%10d\n\n",total);
}

void Sort_list(Linked_list *list)
{
    Node *node=list->first;
    Node *np=(Node*)malloc(sizeof(Node));
    Node *temp;
    Node *min;
    int i=1;
    while(node!=NULL)
    {
        min=node;
        temp=node->next;
        while(temp!=NULL)
        {
            if(min->data.gia<temp->data.gia)
            {
                min=temp;
            }
            temp=temp->next;
        }
        if(min!=node->data.gia)
        {
            np->data=node->data;
            node->data=min->data;
            min->data=np->data;
        }
        node=node->next;
    }
    free(np);
    print_list(list);
}

int main()
{
    int n;
    Node *node;
    Node *np;
    Linked_list *list=create_list();
    printf("Muon nhap so thu tu de nhap hang.\nNhap 0 de ngung nhap hang.\n");
    printf("________________________________________________\n");
    printf("Nhap STT:");
    scanf("%d",&n);
    getchar();
    node=create_node(n);
    np=node;
    add_first_node(list,node);
    printf("________________________________________________\n");
    printf("Nhap STT:");
    scanf("%d",&n);
    while(n!=0)
    {
        getchar();
        node=create_node(n);
        insert_to_last(list,node);
        //insert_sorted(list,np,node);
        np=node;
        printf("________________________________________________\n");
        printf("Nhap STT:");
        scanf("%d",&n);
    }
    printf("\n================================================\n");
    printf("_______________ SO LIEU BAN HANG _______________\n");
    printf("STT Ten hang    Don gia    So luong   Thanh tien\n");
    print_list(list);
    Sort_list(list);
    return 0;
}

/*
1
sach
5
100
2
tay
1
500
3
but
2
300
4
vo
5
100
5
thuoc
2
300
6
may tinh
400
50
0
*/


/*
1
tay
1
500
2
sach
5
100
3
but
2
300
4
thuoc
2
300
5
vo
5
100
6
may tinh
400
50
0
*/
